<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="exercises9.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure pragmas browser query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1122"/><column_width id="4" width="0"/><expanded_item id="0" parent="0"/><expanded_item id="0" parent="1"/><expanded_item id="0" parent="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Logs" custom_title="0" dock_id="1" table="4,4:mainLogs"/><dock_state state="000000ff00000000fd00000001000000020000054d000002aefc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000054d0000016900ffffff0000054d0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Logs" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="141"/><column index="2" value="70"/><column index="3" value="70"/><column index="4" value="84"/><column index="5" value="61"/><column index="6" value="101"/><column index="7" value="171"/><column index="8" value="109"/><column index="9" value="70"/><column index="10" value="56"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- 9.1 Give the package name and how many times they're downloaded. Order by highest to lowest number of times downloaded.
SELECT package, COUNT(*) downloads FROM Logs GROUP BY package, '&quot;download_date';

-- 9.2 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM
SELECT *, DENSE_RANK() OVER(ORDER BY downloads) AS ranking 
FROM (
	SELECT 
		package, 
		COUNT(*) downloads
	FROM Logs 
	GROUP BY package
	HAVING time 
	BETWEEN '09:00:00' AND '11:00:00'
);

-- 9.3 How many records (downloads) are from China (&quot;CN&quot;) or Japan(&quot;JP&quot;) or Singapore (&quot;SG&quot;)?
SELECT COUNT(*) CN_JP_SG_count FROM Logs WHERE country IN ('CN', 'JP', 'SG');

-- 9.4 Print the countries whose downloads are more than the downloads from China (&quot;CN&quot;)
SELECT country FROM Logs GROUP BY country HAVING COUNT(*) &gt; (
	SELECT COUNT(*) FROM Logs GROUP BY country HAVING country = 'CN'
); 

-- 9.5 Print the length of each package name for packages which appear only once. 
SELECT LENGTH(package) package_name_length FROM Logs GROUP BY package HAVING COUNT(*) = 1;

-- In the same query, show the average length of all such packages.
SELECT AVG(package_name_length) average_single_package_name_length 
FROM (
	SELECT LENGTH(package) package_name_length FROM Logs GROUP BY package HAVING COUNT(*) = 1
);

-- 9.6 Get the package whose download count ranks 2nd (print package name and its download count).
SELECT package, downloads FROM (
	SELECT *, DENSE_RANK() OVER(ORDER BY downloads DESC) AS ranking 
	FROM (
		SELECT 
			package, 
			COUNT(*) downloads
		FROM Logs 
		GROUP BY package
	)
) AS subquery WHERE ranking = 2;

-- 9.7 Print the name of the package whose download count is bigger than 1000.
SELECT 
	package, 
	COUNT(*) downloads
FROM Logs 
GROUP BY package
HAVING downloads &gt; 1000;

-- 9.8 The field &quot;r_os&quot; is the operating system of the users.
-- Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).
--Hint: to write a query which can ignore the version number, try this: https://github.com/asg017/sqlite-regex)
-- not using python, can't install regex package

-- without ignoring version numbers
SELECT 
	r_os, 
	COUNT(r_os) AS os_count, 
	CAST(COUNT(r_os) AS FLOAT) / (SELECT COUNT(r_os) FROM Logs) * 100 AS os_percentage 
FROM Logs GROUP BY r_os;

-- kind of managed it by making new column with case....
SELECT 
	subquery.os,
	COUNT(subquery.os) AS os_count,
	CAST(COUNT(subquery.os) AS FLOAT) / (SELECT COUNT(r_os) FROM Logs) * 100 AS os_percentage
FROM LOGS JOIN (
	SELECT 
		DISTINCT CASE
			WHEN r_os LIKE &quot;%darwin%&quot; THEN &quot;darwin&quot;
			WHEN r_os LIKE &quot;%linux%&quot; THEN &quot;linux&quot;
			WHEN r_os LIKE &quot;%mingw%&quot; THEN &quot;mingw&quot;
			ELSE &quot;NA&quot;
		END AS os,
		r_os
	FROM Logs
) AS subquery ON subquery.r_os = Logs.r_os
GROUP BY subquery.os;</sql><current_tab id="0"/></tab_sql></sqlb_project>
