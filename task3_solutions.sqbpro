<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="exercises3.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure pragmas browser query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="904"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Boxes" custom_title="0" dock_id="1" table="4,5:mainBoxes"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011800ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="create tables">CREATE TABLE Warehouses (
   Code INTEGER NOT NULL,
   Location TEXT NOT NULL ,
   Capacity INTEGER NOT NULL,
   PRIMARY KEY (Code)
 );

CREATE TABLE Boxes (
    Code TEXT NOT NULL,
    Contents TEXT NOT NULL ,
    Value REAL NOT NULL ,
    Warehouse INTEGER NOT NULL,
    PRIMARY KEY (Code)
 );</sql><sql name="populate tables">INSERT INTO Warehouses(Code,Location,Capacity) VALUES
 (1,'Chicago',3),
 (2,'Chicago',4),
 (3,'New York',7),
 (4,'Los Angeles',2),
 (5,'San Francisco',8);
 
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES
 ('0MN7','Rocks',180,3),
 ('4H8P','Rocks',250,1),
 ('4RT3','Scissors',190,4),
 ('7G3H','Rocks',200,1),
 ('8JN6','Papers',75,1),
 ('8Y6U','Papers',50,3),
 ('9J6F','Papers',175,2),
 ('LL08','Rocks',140,4),
 ('P0H6','Scissors',125,1),
 ('P2T6','Scissors',150,2),
 ('TU55','Papers',90,5);</sql><sql name="task3 solutions*">-- 3.1 Select all warehouses.

SELECT * FROM Warehouses;

-- 3.2 Select all boxes with a value larger than $150.

SELECT * FROM Boxes WHERE Value &gt; 150;

-- 3.3 Select all distinct contents in all the boxes.

SELECT Contents FROM Boxes GROUP BY Contents;

SELECT DISTINCT Contents FROM Boxes;

--3.4 Select the average value of all boxes.

SELECT AVG(Value) avg_value FROM Boxes;

SELECT ROUND(AVG(Value), 2) AS avg_value FROM Boxes;

-- 3.5 Select the warehouse code and the average value of the boxes in each warehouse.
SELECT Warehouse, AVG(Value) avg_value 
FROM Boxes
GROUP BY Warehouse;

-- 3.6 Same as Task 3.5, but select only the warehouses where the average value of the boxes is greater than 150.
SELECT Warehouse, AVG(Value) AS avg_value 
FROM Boxes
GROUP BY Warehouse
HAVING avg_value &gt; 150;

-- 3.7 Select the code of each box, along with the location of the warehouse the box is located in.
SELECT Boxes.Code, Warehouses.Location 
FROM Boxes JOIN Warehouses 
ON Boxes.Warehouse = Warehouses.Code;

-- 3.8 Select the warehouse codes, along with the number of boxes in each warehouse.
SELECT Warehouse, COUNT(*) boxes FROM Boxes GROUP BY Warehouse;

-- 3.9 Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes stored is larger than the warehouse capacity).

SELECT Warehouses.Code
FROM Warehouses 
JOIN Boxes
ON Warehouses.Code = Boxes.Warehouse
GROUP BY Boxes.Warehouse
HAVING Warehouses.Capacity &lt; COUNT(Boxes.Code);

-- 3.10 Select the codes of all boxes in the warehouse located in Chicago.

SELECT Boxes.Code 
FROM Boxes JOIN Warehouses 
ON Boxes.Warehouse = Warehouses.Code
WHERE Location = 'Chicago';

-- 3.11 Create a new warehouse in New York with a capacity for 3 boxes.

INSERT INTO Warehouses (Location, Capacity) VALUES ('New York', 3);

-- 3.12 Create a new box with code &quot;H5RT&quot;, containing &quot;Papers&quot; with a value of $200, and located in warehouse 2.

INSERT INTO Boxes (Code, Contents, Value, Warehouse) VALUES ('H5RT', 'Papers', 200.0, 2);

-- 3.13 Reduce the value of all boxes by 15%.

UPDATE Boxes SET Value = Value * 0.85;

-- 3.14 Delete all records of boxes from saturated warehouses.

DELETE FROM Boxes
WHERE Warehouse IN (
	SELECT Warehouses.Code
	FROM Warehouses 
	JOIN Boxes
	ON Warehouses.Code = Boxes.Warehouse
	GROUP BY Boxes.Warehouse
	HAVING Warehouses.Capacity &lt; COUNT(Boxes.Code)
);

--3.15 Remove all boxes with a value lower than $100.
DELETE FROM Boxes WHERE Value &lt; 100;

--3.16 Add Index for column &quot;Warehouse&quot; in table &quot;boxes&quot;
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
CREATE INDEX IF NOT EXISTS WH_index ON Boxes (Warehouse);	

--3.17 Print all the existing indexes
PRAGMA index_list('Boxes');

SELECT * FROM sqlite_master WHERE type = 'index';

--3.18 Remove (drop) the index you just created
DROP INDEX IF EXISTS WH_index;
</sql><current_tab id="2"/></tab_sql></sqlb_project>
