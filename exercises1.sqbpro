<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/emily/Documents/Code Academy/data/notes/data spikes/SQL - Intro + Join/CAB_students.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1228"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="cohorts" custom_title="0" dock_id="4" table="4,7:maincohorts"/><dock_state state="000000ff00000000fd0000000100000002000001de00000211fc0100000004fb000000160064006f0063006b00420072006f00770073006500310100000000000002490000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500330100000000000001dd0000000000000000fb000000160064006f0063006b00420072006f00770073006500340100000000000001de0000015c00ffffff000001de0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="cohorts" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="148"/><column index="3" value="85"/><column index="4" value="85"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="create tables">CREATE TABLE IF NOT EXISTS Manufacturers (
  Code INTEGER,
  Name TEXT NOT NULL,
  PRIMARY KEY (Code)
);

CREATE TABLE IF NOT EXISTS Products (
  Code INTEGER,
  Name TEXT NOT NULL,
  Price INTEGER NOT NULL,
  Manufacturer INTEGER NOT NULL,
  PRIMARY KEY (Code)
);</sql><sql name="populate tables">INSERT INTO Manufacturers(Code,Name) VALUES(1,'Sony');
INSERT INTO Manufacturers(Code,Name) VALUES(2,'Creative Labs');
INSERT INTO Manufacturers(Code,Name) VALUES(3,'Hewlett-Packard');
INSERT INTO Manufacturers(Code,Name) VALUES(4,'Iomega');
INSERT INTO Manufacturers(Code,Name) VALUES(5,'Fujitsu');
INSERT INTO Manufacturers(Code,Name) VALUES(6,'Winchester');

INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(1,'Hard drive',240,5);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(2,'Memory',120,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(3,'ZIP drive',150,4);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(4,'Floppy disk',5,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(5,'Monitor',240,1);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(6,'DVD drive',180,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(7,'CD drive',90,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(8,'Printer',270,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(9,'Toner cartridge',66,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(10,'DVD burner',180,2);</sql><sql name="exercise 1">-- SELECT Name FROM Products;
-- SELECT Name, Price FROM Products;
-- SELECT Name FROM Products WHERE Price &lt;= 200;
-- SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;
-- SELECT Name, Price * 100 FROM Products;
-- SELECT AVG(Price) FROM Products;
-- SELECT AVG(Price) FROM Products WHERE Code = 2;
-- SELECT COUNT(*) FROM Products WHERE Price &gt; 180;
-- SELECT Name, Price FROM Products WHERE Price &gt;= 180 ORDER BY Price DESC, Name ASC;
-- SELECT * FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
-- SELECT Products.name, Price, Manufacturers.name FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
-- SELECT AVG(Price), Manufacturers.Code FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Code;
-- SELECT AVG(Price), Manufacturers.Name FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Code;
-- SELECT AVG(Price), Manufacturers.Name FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Code HAVING AVG(Price) &gt;= 150;
-- SELECT Name, MIN(Price) Price FROM Products;
-- SELECT Manufacturers.Name, MAX(Price) Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Products.Manufacturer;
-- INSERT INTO (Code, Name, Price, Manufacturer) VALUES(11, 'Loudspeaker', 70, 2);
-- UPDATE Products SET Name = 'Laser Printer' WHERE Code = 8;
-- UPDATE Products SET Price = Products.Price * 0.9;
-- UPDATE Products SET Price = Price * 0.9 WHERE Price &gt;= 120;</sql><current_tab id="2"/></tab_sql></sqlb_project>
